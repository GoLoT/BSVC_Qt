PREFIX:=	../BSVC_Qt_build
BINDIR:=	$(PREFIX)/bin
LIBDIR:=	$(PREFIX)/lib/bsvc

CC:=		gcc
CXX:=		g++
O:=		    o
CFLAGS?=	-g -O -ansi -pedantic -Wall -Werror -std=c11
CXXFLAGS?=	-g -O -ansi -pedantic -Wall -Werror -std=c++11

AR:=		ar
RANLIB:=	ranlib
RM:=		rm
INSTALL:=	install
STRIP:=		strip
MKDIR:=		mkdir

CXXFLAGS+=		-I.

SUBDIR_68KASM:=		Assemblers/68kasm
BIN_68KASM:=		$(SUBDIR_68KASM)/68kasm
SRCS_68KASM:=		$(wildcard $(SUBDIR_68KASM)/*.c)
OBJS_68KASM:=		$(SRCS_68KASM:.c=.o)

SUBDIR_FRAMEWORK:=	Framework
LIB_FRAMEWORK:=		$(SUBDIR_FRAMEWORK)/libframework.a
SRCS_FRAMEWORK:=	$(wildcard $(SUBDIR_FRAMEWORK)/*.cpp)
OBJS_FRAMEWORK:=	$(SRCS_FRAMEWORK:.cpp=.o)

SUBDIR_TOOLS:=		Tools
BIN_TOOLS:=		    #$(SUBDIR_TOOLS)/xtermpipe
SRCS_TOOLS:=		#$(wildcard $(SUBDIR_TOOLS)/*.cpp)
OBJS_TOOLS:=		#$(SRCS_TOOLS:.cpp=.o)

SUBDIR_M68KDEVICES:=	M68k/devices
LIB_M68KDEVICES:=	$(SUBDIR_M68KDEVICES)/libm68kdevices.a
SRCS_M68KDEVICES:=	$(wildcard $(SUBDIR_M68KDEVICES)/*.cpp)
TCL_M68KDEVICES:=	$(wildcard $(SUBDIR_M68KDEVICES)/*.tcl)
SCR_M68KDEVICES:=	$(TCL_M68KDEVICES:.tcl=.scr)
OBJS_M68KDEVICES:=	$(SRCS_M68KDEVICES:.cpp=.o)
TCL2SCR:=		    $(SUBDIR_M68KDEVICES)/tcl2scr

SUBDIR_M68KLOADER:=	M68k/loader
LIB_M68KLOADER:=	$(SUBDIR_M68KLOADER)/libm68kloader.a
SRCS_M68KLOADER:=	$(wildcard $(SUBDIR_M68KLOADER)/*.cpp)
OBJS_M68KLOADER:=	$(SRCS_M68KLOADER:.cpp=.o)

INSTRUCTION:=		M68k/instruction
SRCS_INSTRUCTION:=	M68k/instruction.c
OBJS_INSTRUCTION:=	$(SRCS_INSTRUCTION:.c=.o)

SUBDIR_SIM68000:=	M68k/sim68000
BIN_SIM68000:=		$(SUBDIR_SIM68000)/sim68000
SRCS_SIM68000:=		$(wildcard $(SUBDIR_SIM68000)/*.cpp)
OBJS_SIM68000:=		$(SRCS_SIM68000:.cpp=.o)
DECODE_TABLE_SIM68000:=	$(SUBDIR_SIM68000)/DecodeTable.hpp

SUBDIR_SIM68360:=	M68k/sim68360
BIN_SIM68360:=		$(SUBDIR_SIM68360)/sim68360
SRCS_SIM68360:=		$(wildcard $(SUBDIR_SIM68360)/*.cpp)
OBJS_SIM68360:=		$(SRCS_SIM68360:.cpp=.o)
DECODE_TABLE_SIM68360:=	$(SUBDIR_SIM68360)/DecodeTable.hpp

SUBDIR_UI:=		UI
BIN_BSVC:=		$(SUBDIR_UI)/bsvc

OBJS:=			$(OBJS_68KASM) $(OBJS_FRAMEWORK) $(OBJS_TOOLS) \
			$(OBJS_INSTRUCTION) \
			$(OBJS_M68KDEVICES) $(OBJS_M68KLOADER) \
			$(OBJS_SIM68000) $(OBJS_SIM68360)
DEPENDS:=		$(OBJS:.o=.d)

TARGETS:=		$(BIN_68KASM) $(BIN_SIM68000) $(BIN_SIM68360)
			
SIMLIBS:=		$(LIB_M68KDEVICES) $(LIB_M68KLOADER) $(LIB_FRAMEWORK)
LIBS:=			$(SIMLIBS)
UI:=			$(BSVC_TK)

all:			$(TARGETS)

$(BIN_68KASM):		$(OBJS_68KASM)
			$(CC) -o $(BIN_68KASM).exe $(OBJS_68KASM) -static -static-libgcc -static-libstdc++

$(BIN_TOOLS):		$(OBJS_TOOLS)
			$(CXX) -o $(BIN_TOOLS).exe $(OBJS_TOOLS) -static -static-libgcc -static-libstdc++

$(INSTRUCTION):		$(OBJS_INSTRUCTION)
			gcc -O -ansi -pedantic -Wall -Werror -std=c11   -c -o M68k/instruction.o M68k/instruction.c
			gcc -o $(INSTRUCTION) $(OBJS_INSTRUCTION)

$(BIN_SIM68000):	$(OBJS_SIM68000) $(SIMLIBS)
			$(CXX) -o $(BIN_SIM68000).exe $(OBJS_SIM68000) $(SIMLIBS) -lws2_32 -static -static-libgcc -static-libstdc++ 

$(BIN_SIM68360):	$(OBJS_SIM68360) $(SIMLIBS)
			$(CXX) -o $(BIN_SIM68360).exe $(OBJS_SIM68360) $(SIMLIBS) -lws2_32 -static -static-libgcc -static-libstdc++ 

$(LIB_FRAMEWORK):	$(OBJS_FRAMEWORK)
			$(AR) r $(LIB_FRAMEWORK) $(OBJS_FRAMEWORK)
			$(RANLIB) $(LIB_FRAMEWORK)

$(LIB_M68KDEVICES):	$(OBJS_M68KDEVICES)
			$(AR) r $(LIB_M68KDEVICES) $(OBJS_M68KDEVICES)
			$(RANLIB) $(LIB_M68KDEVICES)

$(LIB_M68KLOADER):	$(OBJS_M68KLOADER)
			$(AR) r $(LIB_M68KLOADER) $(OBJS_M68KLOADER)
			$(RANLIB) $(LIB_M68KLOADER)

$(DECODE_TABLE_SIM68000):	$(INSTRUCTION) $(SUBDIR_SIM68000)/instruction.list
			$(INSTRUCTION) $(SUBDIR_SIM68000)/instruction.list $@ m68000

$(DECODE_TABLE_SIM68360):	$(INSTRUCTION) $(SUBDIR_SIM68360)/instruction.list
			$(INSTRUCTION) $(SUBDIR_SIM68360)/instruction.list $@ cpu32
			
install:		all
			# $(MKDIR) -p $(BINDIR) $(LIBDIR)
			# $(INSTALL) -c $(filter-out UI/bsvc.exe,$(TARGETS:=.exe)) $(BINDIR)
			
clean:
			$(RM) -f $(TARGETS:=.exe) $(UI) $(LIBS) $(OBJS) $(DEPENDS) \
				$(INSTRUCTION) $(DECODE_TABLE_SIM68000) \
				$(DECODE_TABLE_SIM68360) $(SCR_M68KDEVICES) $(BIN_BSVC).bat

%.scr:	%.tcl
	sh $(TCL2SCR) $< > $@

%.d:	%.cpp
	env CC=$(CXX) sh mkdeps.sh `dirname $<` $(CXXFLAGS) $< > $@

%.d:	%.c
	env CC=$(CC) sh mkdeps.sh `dirname $<` $(CFLAGS) $< > $@

include $(DEPENDS)

